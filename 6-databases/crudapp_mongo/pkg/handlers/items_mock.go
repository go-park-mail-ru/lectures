// Code generated by MockGen. DO NOT EDIT.
// Source: items.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	items "github.com/go-park-mail-ru/lectures/6-databases/crudapp_mongo/pkg/items"
	gomock "github.com/golang/mock/gomock"
)

// MockItemRepositoryInterface is a mock of ItemRepositoryInterface interface.
type MockItemRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryInterfaceMockRecorder
}

// MockItemRepositoryInterfaceMockRecorder is the mock recorder for MockItemRepositoryInterface.
type MockItemRepositoryInterfaceMockRecorder struct {
	mock *MockItemRepositoryInterface
}

// NewMockItemRepositoryInterface creates a new mock instance.
func NewMockItemRepositoryInterface(ctrl *gomock.Controller) *MockItemRepositoryInterface {
	mock := &MockItemRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepositoryInterface) EXPECT() *MockItemRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockItemRepositoryInterface) Add(arg0 context.Context, arg1 *items.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockItemRepositoryInterfaceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockItemRepositoryInterface)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockItemRepositoryInterface) Delete(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepositoryInterface)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockItemRepositoryInterface) GetAll() ([]*items.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*items.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockItemRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockItemRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockItemRepositoryInterface) GetByID(arg0 string) (*items.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*items.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockItemRepositoryInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockItemRepositoryInterface)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockItemRepositoryInterface) Update(arg0 *items.Item) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemRepositoryInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemRepositoryInterface)(nil).Update), arg0)
}
